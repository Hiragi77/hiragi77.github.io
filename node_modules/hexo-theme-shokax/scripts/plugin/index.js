"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const injects_1 = __importDefault(require("./lib/injects"));
const node_https_1 = __importDefault(require("node:https"));
const package_json_1 = require("../../package.json");
const node_fs_1 = __importDefault(require("node:fs"));
hexo.on('generateBefore', () => {
    (0, injects_1.default)(hexo);
    if (node_fs_1.default.existsSync('request.lock')) {
        node_fs_1.default.unlinkSync('request.lock');
    }
    if (node_fs_1.default.existsSync('requested.lock')) {
        node_fs_1.default.unlinkSync('requested.lock');
    }
});
hexo.on('generateAfter', () => {
    node_https_1.default.get('https://api.github.com/repos/theme-shoka-x/hexo-theme-shokaX/releases/latest', {
        headers: {
            'User-Agent': 'Theme ShokaX Client'
        }
    }, (res) => {
        let result = '';
        res.on('data', (data) => {
            result += data;
        });
        res.on('end', () => {
            try {
                const latest = JSON.parse(result).tag_name.replace('v', '').split('.');
                const current = package_json_1.version.split('.');
                let isOutdated = false;
                for (let i = 0; i < Math.max(latest.length, current.length); i++) {
                    if (!current[i] || latest[i] > current[i]) {
                        isOutdated = true;
                        break;
                    }
                    if (latest[i] < current[i]) {
                        break;
                    }
                }
                if (isOutdated) {
                    hexo.log.warn(`Your theme ShokaX is outdated. Current version: v${current.join('.')}, latest version: v${latest.join('.')}`);
                    hexo.log.warn('Visit https://github.com/theme-shoka-x/hexo-theme-shokaX/releases for more information.');
                }
            }
            catch (err) {
                hexo.log.error('Failed to detect version info. Error message:');
                hexo.log.error(err);
            }
        });
    }).on('error', err => {
        hexo.log.error('Failed to detect version info. Error message:');
        hexo.log.error(err);
    });
});
